version: '3'

# CharacterMarkdown - Developer Task Automation
# Requires: Task (https://taskfile.dev)
# Install: brew install go-task/tap/go-task

vars:
  ADDON_NAME: CharacterMarkdown
  MANIFEST_FILE: CharacterMarkdown.txt
  ADDON_MANIFEST: CharacterMarkdown.addon
  VERSION:
    sh: grep "## Version:" {{.MANIFEST_FILE}} | awk '{print $3}'
  # Directories
  ESO_LIVE_ADDONS: "{{.HOME}}/Documents/Elder Scrolls Online/live/AddOns"
  ESO_PTS_ADDONS: "{{.HOME}}/Documents/Elder Scrolls Online/pts/AddOns"
  ESO_LIVE_SAVEDVARS: "{{.HOME}}/Documents/Elder Scrolls Online/live/SavedVariables"
  BUILD_DIR: build
  DIST_DIR: dist
  SRC_DIR: src
  
  # Required files
  REQUIRED_FILES: "{{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE"

tasks:
  # =============================================================================
  # DEFAULT TASK
  # =============================================================================
  
  default:
    desc: Show available tasks
    cmds:
      - task --list-all
    silent: true

  # =============================================================================
  # DEPENDENCY INSTALLATION
  # =============================================================================
  
  install:deps:
    desc: Install development dependencies (LuaJIT, Luacheck, pre-commit)
    cmds:
      - echo "üì¶ Installing development dependencies..."
      - brew list luajit &>/dev/null || brew install luajit
      - brew list luarocks &>/dev/null || brew install luarocks
      - luarocks list luacheck | grep -q luacheck || luarocks install luacheck
      - command -v pre-commit &>/dev/null || brew install pre-commit
      - pre-commit install
      - echo "‚úÖ Dependencies installed successfully"
      - echo ""
      - echo "Installed:"
      - luajit -v
      - luacheck --version
      - pre-commit --version

  # =============================================================================
  # ESO INSTALLATION TASKS
  # =============================================================================
  
  install:live:
    desc: Install addon to ESO Live client (copy)
    cmds:
      - |
        echo "üì• Installing {{.ADDON_NAME}} to ESO Live..."
        mkdir -p "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}/{{.SRC_DIR}}"
        cp {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}/"
        if [ -f "{{.ADDON_MANIFEST}}" ]; then
          cp {{.ADDON_MANIFEST}} "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}/"
        fi
        cp -r {{.SRC_DIR}}/ "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}/{{.SRC_DIR}}"
        echo "‚úÖ Installed to {{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
    silent: true

  install:pts:
    desc: Install addon to ESO PTS client (copy)
    cmds:
      - |
        echo "üì• Installing {{.ADDON_NAME}} to ESO PTS..."
        mkdir -p "{{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}/{{.SRC_DIR}}"
        cp {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE "{{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}/"
        if [ -f "{{.ADDON_MANIFEST}}" ]; then
          cp {{.ADDON_MANIFEST}} "{{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}/"
        fi
        cp -r {{.SRC_DIR}}/ "{{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}/{{.SRC_DIR}}"
        echo "‚úÖ Installed to {{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}"
    silent: true

  install:dev:
    desc: Install addon as symlink for live development
    cmds:
      - |
        echo "üîó Creating development symlink..."
        rm -rf "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
        ln -s "{{.PWD}}" "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
        echo "‚úÖ Development symlink created"
        echo "   Edit files here, use /reloadui in-game to test"
    silent: true

  uninstall:live:
    desc: Remove addon from ESO Live client
    cmds:
      - |
        echo "üóëÔ∏è  Removing {{.ADDON_NAME}} from ESO Live..."
        rm -rf "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
        echo "‚úÖ Uninstalled from Live"
    silent: true

  uninstall:pts:
    desc: Remove addon from ESO PTS client
    cmds:
      - |
        echo "üóëÔ∏è  Removing {{.ADDON_NAME}} from ESO PTS..."
        rm -rf "{{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}"
        echo "‚úÖ Uninstalled from PTS"
    silent: true

  uninstall:dev:
    desc: Remove development symlink and install normally
    cmds:
      - |
        echo "üóëÔ∏è  Removing development symlink..."
        rm -rf "{{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
        echo "‚úÖ Symlink removed"
        echo ""
      - task: install:live
    silent: true

  clean:savedvars:
    desc: Remove saved variables file for clean reinstall
    cmds:
      - |
        echo "üóëÔ∏è  Removing saved variables..."
        if [ -f "{{.ESO_LIVE_SAVEDVARS}}/{{.ADDON_NAME}}.lua" ]; then
          rm -f "{{.ESO_LIVE_SAVEDVARS}}/{{.ADDON_NAME}}.lua"
          echo "‚úÖ Saved variables removed"
        else
          echo "‚ÑπÔ∏è  No saved variables file found"
        fi
    silent: true

  # =============================================================================
  # VALIDATION & LINTING
  # =============================================================================
  
  lint:
    desc: Run Luacheck on all Lua files
    cmds:
      - |
        echo "üîç Running Luacheck..."
        luacheck {{.SRC_DIR}} --exclude-files "*.backup" --exclude-files ".task/**"
      - echo "‚úÖ Lint passed"

  lint:fix:
    desc: Auto-fix Luacheck issues where possible
    cmds:
      - |
        echo "üîß Auto-fixing Luacheck issues..."
        luacheck {{.SRC_DIR}} --exclude-files "*.backup" --exclude-files ".task/**" --fix
      - echo "‚úÖ Auto-fix complete"

  validate:
    desc: Validate addon manifest and project structure
    cmds:
      - echo "‚úÖ Validating project..."
      - task: validate:files
      - task: validate:manifest
      - task: validate:syntax
      - echo "‚úÖ All validations passed"
    silent: true

  validate:files:
    desc: Check that all required files exist
    cmds:
      - echo "  Checking required files..."
      - |
        for file in {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE; do
          if [ ! -f "$file" ]; then
            echo "  ‚úó Missing required file: $file"
            exit 1
          fi
        done
        if [ ! -d "{{.SRC_DIR}}" ]; then
          echo "  ‚úó Missing required directory: {{.SRC_DIR}}"
          exit 1
        fi
      - echo "    ‚úì All required files present"
    silent: true

  validate:manifest:
    desc: Validate addon manifest file
    cmds:
      - echo "  Validating manifest..."
      - |
        luajit scripts/validate-manifest.lua {{.MANIFEST_FILE}}

  validate:syntax:
    desc: Check Lua syntax with LuaJIT
    cmds:
      - echo "  Checking Lua syntax..."
      - |
        find {{.SRC_DIR}} -name "*.lua" -type f | while read file; do
          luajit -bl "$file" > /dev/null || (echo "  ‚úó Lua syntax errors in $file" && exit 1)
        done
      - echo "    ‚úì All Lua files syntax valid"
    silent: true

  test:
    desc: Run all tests (lint + validate)
    deps: [lint, validate]
    cmds:
      - echo "‚úÖ All tests passed"

  # =============================================================================
  # BUILD & PACKAGING
  # =============================================================================

  clean:
    desc: Clean build artifacts
    cmds:
      - |
        echo "üßπ Cleaning build artifacts..."
        rm -rf {{.BUILD_DIR}}
        rm -rf {{.DIST_DIR}}
        rm -f {{.ADDON_NAME}}-*.zip
        echo "‚úÖ Clean complete"

  rename-manifest:
    desc: Rename .txt manifest to .addon for console compatibility
    cmds:
      - |
        if [ -f "{{.MANIFEST_FILE}}" ] && [ ! -f "{{.ADDON_MANIFEST}}" ]; then
          echo "üìù Renaming {{.MANIFEST_FILE}} ‚Üí {{.ADDON_MANIFEST}}"
          cp "{{.MANIFEST_FILE}}" "{{.ADDON_MANIFEST}}"
          echo "‚úÖ Manifest renamed (original preserved)"
        elif [ -f "{{.ADDON_MANIFEST}}" ]; then
          echo "‚úÖ {{.ADDON_MANIFEST}} already exists"
        else
          echo "‚ùå Error: Neither {{.MANIFEST_FILE}} nor {{.ADDON_MANIFEST}} found"
          exit 1
        fi

  build:
    desc: Build release ZIP artifact with full validation
    deps: [clean, test, rename-manifest]
    cmds:
      - |
        echo "üì¶ Building {{.ADDON_NAME}} v{{.VERSION}} release..."
        mkdir -p {{.BUILD_DIR}}/{{.ADDON_NAME}}
        mkdir -p {{.DIST_DIR}}
        # Copy files using .build-ignore exclusions
        rsync -a --quiet \
          --exclude-from=.build-ignore \
          --exclude='{{.BUILD_DIR}}' \
          --exclude='{{.DIST_DIR}}' \
          . {{.BUILD_DIR}}/{{.ADDON_NAME}}/
      - |
        # Create ZIP with version from manifest
        VERSION="{{.VERSION}}"
        cd {{.BUILD_DIR}} && zip -r -q "../{{.DIST_DIR}}/{{.ADDON_NAME}}-${VERSION}.zip" {{.ADDON_NAME}}
        echo "‚úÖ Built: {{.DIST_DIR}}/{{.ADDON_NAME}}-${VERSION}.zip"
      - |
        bash scripts/validate-zip.sh {{.DIST_DIR}}/{{.ADDON_NAME}}-*.zip

  build:fast:
    desc: Build without tests (fast local iteration)
    deps: [clean, rename-manifest]
    cmds:
      - |
        echo "üì¶ Building {{.ADDON_NAME}} v{{.VERSION}} (fast mode)..."
        mkdir -p {{.BUILD_DIR}}/{{.ADDON_NAME}}
        mkdir -p {{.DIST_DIR}}
        rsync -a --quiet \
          --exclude-from=.build-ignore \
          --exclude='{{.BUILD_DIR}}' \
          --exclude='{{.DIST_DIR}}' \
          . {{.BUILD_DIR}}/{{.ADDON_NAME}}/
      - |
        VERSION="{{.VERSION}}"
        cd {{.BUILD_DIR}} && zip -r -q "../{{.DIST_DIR}}/{{.ADDON_NAME}}-${VERSION}.zip" {{.ADDON_NAME}}
        echo "‚úÖ Built: {{.DIST_DIR}}/{{.ADDON_NAME}}-${VERSION}.zip"

  package:
    desc: Alias for build (backward compatibility)
    deps: [build]

  package:esoui:
    desc: Create ESOUI-compatible package (same as build)
    deps: [build]
    cmds:
      - |
        echo "‚úÖ ESOUI package ready: {{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip"

  # =============================================================================
  # VERSION MANAGEMENT
  # =============================================================================

  version:
    desc: Show current version from manifest
    cmds:
      - |
        VERSION="{{.VERSION}}"
        API_VERSION=$(grep "^## APIVersion:" {{.MANIFEST_FILE}} | awk '{print $3, $4}')
        echo "üì¶ {{.ADDON_NAME}}"
        echo "   Version: ${VERSION}"
        echo "   API Version: ${API_VERSION}"
    silent: true

  version:bump:
    desc: "Bump version number (usage: task version:bump -- <major|minor|patch>)"
    vars:
      BUMP_TYPE: '{{.CLI_ARGS | default "patch"}}'
    cmds:
      - |
        echo "üîÑ Bumping {{.BUMP_TYPE}} version..."
        CURRENT="{{.VERSION}}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

        case "{{.BUMP_TYPE}}" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch|*)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "  $CURRENT ‚Üí $NEW_VERSION"

        # Update manifest
        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' "s/^## Version: .*/## Version: $NEW_VERSION/" {{.MANIFEST_FILE}}
        else
          sed -i "s/^## Version: .*/## Version: $NEW_VERSION/" {{.MANIFEST_FILE}}
        fi

        # Update CHANGELOG
        DATE=$(date +%Y-%m-%d)
        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' "s/## \[Unreleased\]/## [Unreleased]\n\n## [$NEW_VERSION] - $DATE/" CHANGELOG.md
        else
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$NEW_VERSION] - $DATE/" CHANGELOG.md
        fi

        echo "‚úÖ Version bumped to $NEW_VERSION"
        echo "   Updated: {{.MANIFEST_FILE}}, CHANGELOG.md"
    silent: true

  # =============================================================================
  # GIT TASKS
  # =============================================================================

  git:status:
    desc: Show git status and pending changes
    cmds:
      - git status
      - echo ""
      - echo "Uncommitted changes:"
      - git diff --stat
    silent: true

  git:commit:
    desc: "Stage and commit changes (usage: task git:commit -- \"message\")"
    cmds:
      - |
        git add .
        git commit -m "{{.CLI_ARGS}}"
        echo "‚úÖ Changes committed"
    silent: true

  git:tag:
    desc: Create version tag for current version
    cmds:
      - |
        git tag -a "v{{.VERSION}}" -m "Release v{{.VERSION}}"
        echo "‚úÖ Tag v{{.VERSION}} created"
        echo "   Push with: git push origin main --tags"
    silent: true

  # =============================================================================
  # RELEASE WORKFLOW
  # =============================================================================

  release:prepare:
    desc: Prepare for release (validate and show checklist)
    cmds:
      - echo "üöÄ Preparing release..."
      - echo "‚ö†Ô∏è  Ensure CHANGELOG.md is updated with release notes"
      - echo "‚ö†Ô∏è  Ensure version in {{.MANIFEST_FILE}} is correct"
      - task: test
      - |
        VERSION="{{.VERSION}}"
        echo ""
        echo "üìã Release Checklist:"
        echo "  1. ‚úÖ Tests passed"
        echo "  2. Update CHANGELOG.md with version ${VERSION}"
        echo "  3. Commit changes: git commit -am 'Release v${VERSION}'"
        echo "  4. Create tag: git tag v${VERSION}"
        echo "  5. Push: git push origin main --tags"
        echo ""
        echo "GitHub Actions will automatically:"
        echo "  - Build release ZIP"
        echo "  - Create GitHub release"
        echo "  - Upload to ESOUI (if configured)"

  release:tag:
    desc: Create and push release tag (interactive)
    cmds:
      - |
        VERSION="{{.VERSION}}"
        echo "üìã Creating release tag v${VERSION}"
        read -p "Create tag v${VERSION}? (y/N): " CONFIRM
        if [ "$CONFIRM" = "y" ] || [ "$CONFIRM" = "Y" ]; then
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          echo "‚úÖ Tag created: v${VERSION}"
          echo ""
          read -p "Push tag to origin? (y/N): " PUSH
          if [ "$PUSH" = "y" ] || [ "$PUSH" = "Y" ]; then
            git push origin main --tags
            echo "‚úÖ Tag pushed to GitHub"
            echo "üöÄ GitHub Actions will now build and release"
          else
            echo "‚ö†Ô∏è  Tag created locally but not pushed"
            echo "   Push with: git push origin main --tags"
          fi
        else
          echo "‚ùå Tag creation cancelled"
        fi

  release:
    desc: Create full release (build, package, tag) - backward compatibility
    deps: [validate]
    cmds:
      - task: package
      - task: git:tag
      - |
        echo ""
        echo "‚úÖ Release v{{.VERSION}} ready!"
        echo ""
        echo "Next steps:"
        echo "  1. Push tag: git push origin main --tags"
        echo "  2. Upload: {{.DIST_DIR}}/{{.ADDON_NAME}}-v{{.VERSION}}.zip"
        echo "  3. GitHub Actions will handle the rest"
    silent: true

  release:github:
    desc: Create GitHub release (requires gh CLI)
    deps: [package]
    cmds:
      - |
        echo "üöÄ Creating GitHub release v{{.VERSION}}..."
        gh release create "v{{.VERSION}}" "{{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip" \
          --title "v{{.VERSION}}" \
          --notes-file CHANGELOG.md
        echo "‚úÖ GitHub release created"
    silent: true

  # =============================================================================
  # DEVELOPMENT WORKFLOW
  # =============================================================================

  dev:
    desc: Start development mode (symlink + watch)
    cmds:
      - task: install:dev
      - echo ""
      - echo "üî• Development mode active!"
      - echo "  - Edit files in this directory"
      - echo "  - Use /reloadui in ESO to test changes"
      - echo "  - Press Ctrl+C to stop watching"
      - echo ""
      - task: dev:watch
    silent: true

  dev:watch:
    desc: Watch for file changes (requires fswatch)
    cmds:
      - |
        if ! command -v fswatch &> /dev/null; then
          echo "‚ö†Ô∏è  fswatch not installed. Install with: brew install fswatch"
          exit 1
        fi
        echo "üëÄ Watching for changes..."
        fswatch -o {{.ADDON_NAME}}.xml {{.SRC_DIR}}/ | while read; do
          echo "[$(date +%H:%M:%S)] Files changed - use /reloadui in ESO"
        done
    silent: true

  dev:lint:
    desc: Lint Lua code (alias for lint)
    cmds:
      - task: lint

  # =============================================================================
  # DOCUMENTATION & INFO
  # =============================================================================

  info:
    desc: Show addon information
    cmds:
      - |
        echo "üì¶ Addon Information"
        echo "===================="
        echo "Name:        {{.ADDON_NAME}}"
        echo "Version:     {{.VERSION}}"
        echo "Location:    {{.PWD}}"
        echo "ESO Live:    {{.ESO_LIVE_ADDONS}}/{{.ADDON_NAME}}"
        echo "ESO PTS:     {{.ESO_PTS_ADDONS}}/{{.ADDON_NAME}}"
        echo ""
        echo "Core Files:"
        ls -lh {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE
        echo ""
        echo "Source Files:"
        find {{.SRC_DIR}} -name "*.lua" -type f | sort
    silent: true

  size:
    desc: Show file sizes and package size
    cmds:
      - |
        echo "üìä File Sizes:"
        du -h {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE
        echo ""
        echo "Source Directory:"
        du -sh {{.SRC_DIR}}/
        echo ""
        echo "Total project size:"
        du -sh .
        echo ""
        echo "Distribution size:"
        du -sh {{.DIST_DIR}} 2>/dev/null || echo "  (not built yet - run 'task build')"
    silent: true

  backup:
    desc: Create backup of current addon
    cmds:
      - |
        BACKUP_NAME="backup-{{.ADDON_NAME}}-$(date +%Y%m%d-%H%M%S).tar.gz"
        echo "üíæ Creating backup: $BACKUP_NAME"
        tar czf "$BACKUP_NAME" {{.MANIFEST_FILE}} {{.ADDON_NAME}}.xml README.md LICENSE {{.SRC_DIR}}/
        echo "‚úÖ Backup created: $BACKUP_NAME"
    silent: true

  docs:
    desc: Show documentation files
    cmds:
      - echo "üìñ Documentation files:"
      - echo "  - README.md (user guide)"
      - echo "  - CHANGELOG.md (version history)"
      - echo "  - docs/SETUP.md (development setup)"
      - echo "  - docs/RELEASE.md (release process)"
    silent: true

  docs:serve:
    desc: Serve documentation locally (requires Python)
    cmds:
      - echo "üìö Serving docs at http://localhost:8000"
      - python3 -m http.server 8000
    silent: true

  # =============================================================================
  # MINION / ESOUI TASKS
  # =============================================================================

  minion:prepare:
    desc: Prepare package for Minion/ESOUI upload
    deps: [package:esoui]
    cmds:
      - |
        echo "üì¶ Package ready for ESOUI/Minion:"
        echo "   {{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip"
        echo ""
        echo "Upload options:"
        echo "  1. Manual: https://www.esoui.com/downloads/upload-update.php"
        echo "  2. Automated: Push git tag (GitHub Actions handles upload)"
    silent: true

  minion:verify:
    desc: Verify package meets ESOUI requirements
    cmds:
      - echo "‚úÖ Verifying ESOUI package requirements..."
      - |
        if [ ! -f "{{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip" ]; then
          echo "‚ùå Package not found. Run: task build"
          exit 1
        fi
      - echo "  ‚úì Package exists"
      - |
        SIZE=$(stat -f%z "{{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip" 2>/dev/null || stat -c%s "{{.DIST_DIR}}/{{.ADDON_NAME}}-{{.VERSION}}.zip")
        SIZE_MB=$((SIZE / 1024 / 1024))
        if [ $SIZE_MB -gt 10 ]; then
          echo "  ‚ö†Ô∏è  Warning: Package >10MB (${SIZE_MB}MB)"
        else
          echo "  ‚úì Package size OK (${SIZE_MB}MB)"
        fi
      - echo "  ‚úì Ready for ESOUI/Minion upload"
    silent: true

  # =============================================================================
  # HELP TASKS
  # =============================================================================

  help:install:
    desc: Show installation help
    cmds:
      - echo "üì• Installation Commands:"
      - echo "  task install:live      - Copy addon to ESO Live"
      - echo "  task install:pts       - Copy addon to ESO PTS"
      - echo "  task install:dev       - Symlink for live development"
      - echo "  task uninstall:live    - Remove from ESO Live"
      - echo "  task uninstall:pts     - Remove from ESO PTS"
      - echo "  task uninstall:dev     - Remove symlink"
      - echo "  task clean:savedvars   - Remove saved variables for clean reinstall"
    silent: true

  help:release:
    desc: Show release workflow help
    cmds:
      - echo "üöÄ Release Workflow:"
      - echo "  1. task version:bump -- patch   (or minor/major)"
      - echo "  2. Edit CHANGELOG.md"
      - echo "  3. task test                    (validate everything)"
      - echo "  4. task git:commit -- 'Release vX.X.X'"
      - echo "  5. task release:tag             (creates and pushes tag)"
      - echo "  6. GitHub Actions handles the rest!"
      - echo ""
      - echo "Alternative (manual):"
      - echo "  task release:prepare    - Show checklist"
      - echo "  git tag vX.X.X"
      - echo "  git push origin main --tags"
    silent: true

  help:dev:
    desc: Show development help
    cmds:
      - echo "üî• Development Workflow:"
      - echo "  1. task install:dev     - Setup dev mode (symlink)"
      - echo "  2. Edit .lua/.xml files"
      - echo "  3. /reloadui in ESO     - Test changes instantly"
      - echo "  4. task lint            - Check code quality"
      - echo "  5. task test            - Full validation"
      - echo "  6. git commit           - Pre-commit hooks run automatically"
    silent: true
