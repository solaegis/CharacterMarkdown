name: Release CharacterMarkdown

on:
  push:
    tags:
      - 'v*'

env:
  ADDON_NAME: CharacterMarkdown
  ESOUI_ADDON_ID: '4279'
  ESO_API_VERSION: '11.0.0'
  LUA_VERSION: "5.1"
  BUILD_DIR: "/tmp/CharacterMarkdown"
  # Optional: Set to update API version automatically (e.g., 101047)
  # UPDATE_API_VERSION: ""

permissions:
  contents: write

jobs:
  release:
    name: Build and Publish
    runs-on: ubuntu-latest
    
    steps:
      # ========================================================================
      # 1. Checkout Repository
      # ========================================================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog extraction

      # ========================================================================
      # 2. Extract Version from Git Tag and Generate Addon Name
      # ========================================================================
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: Update API version and generate addon name
        id: addon_name
        run: |
          # Read current API version from manifest
          API_VERSION=$(grep "^## APIVersion:" ${{ env.ADDON_NAME }}.addon | awk '{print $3}')
          echo "üìã Current API Version in manifest: $API_VERSION"
          
          # Check if we should update API version automatically
          if [ -n "${{ env.UPDATE_API_VERSION }}" ]; then
            echo "üîÑ Auto-updating API version to: ${{ env.UPDATE_API_VERSION }}"
            sed -i "s/^## APIVersion: .*/## APIVersion: ${{ env.UPDATE_API_VERSION }}/g" ${{ env.ADDON_NAME }}.addon
            API_VERSION="${{ env.UPDATE_API_VERSION }}"
            echo "‚úÖ API version updated to: $API_VERSION"
          else
            echo ""
            echo "üîç API Version Check:"
            echo "   Current in manifest: $API_VERSION"
            echo "   Expected for Gold Road: 101047+"
            echo ""
            echo "üìù To update API version before release:"
            echo "   1. Run in ESO: /script d(GetAPIVersion())"
            echo "   2. Use helper script: ./scripts/update-api-version.sh [VERSION]"
            echo "   3. Or set UPDATE_API_VERSION environment variable in workflow"
            echo ""
            
            # Validate API version is reasonable (basic sanity check)
            if [ "$API_VERSION" -lt 101000 ]; then
              echo "‚ö†Ô∏è  WARNING: API version $API_VERSION seems outdated"
              echo "   Consider updating to current ESO API version"
            elif [ "$API_VERSION" -ge 101047 ]; then
              echo "‚úÖ API version $API_VERSION appears current for Gold Road"
            else
              echo "‚ÑπÔ∏è  API version $API_VERSION may need updating for latest ESO release"
            fi
          fi
          
          # Map API version to client release name (using >= logic for current/future releases)
          if [ "$API_VERSION" -ge 101047 ]; then
            CLIENT_RELEASE="Gold Road"
          elif [ "$API_VERSION" -ge 101040 ]; then
            CLIENT_RELEASE="Necrom"
          elif [ "$API_VERSION" -ge 101030 ]; then
            CLIENT_RELEASE="High Isle"
          elif [ "$API_VERSION" -ge 101020 ]; then
            CLIENT_RELEASE="Blackwood"
          elif [ "$API_VERSION" -ge 101010 ]; then
            CLIENT_RELEASE="Greymoor"
          elif [ "$API_VERSION" -ge 101000 ]; then
            CLIENT_RELEASE="Elsweyr"
          else
            # Fallback: use API version if no mapping found
            CLIENT_RELEASE="API-$API_VERSION"
            echo "‚ö†Ô∏è  No client release mapping found for API version $API_VERSION"
          fi
          
          # Generate addon name following ESOUI best practices
          if [ "$CLIENT_RELEASE" = "API-$API_VERSION" ]; then
            # For unmapped versions, use API version
            FULL_ADDON_NAME="${{ env.ADDON_NAME }} - Updated for $CLIENT_RELEASE"
          else
            # For known releases, use friendly name
            FULL_ADDON_NAME="${{ env.ADDON_NAME }} - Updated for $CLIENT_RELEASE"
          fi
          
          echo "ADDON_NAME=$FULL_ADDON_NAME" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$FULL_ADDON_NAME-${VERSION}.zip" >> $GITHUB_OUTPUT
          echo "CLIENT_RELEASE=$CLIENT_RELEASE" >> $GITHUB_OUTPUT
          echo "üì¶ Addon Name: $FULL_ADDON_NAME"
          echo "üì¶ Client Release: $CLIENT_RELEASE"

      # ========================================================================
      # 3. Setup Lua Environment (LuaJIT for Lua 5.1 compatibility)
      # ========================================================================
      - name: Setup LuaJIT
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: ${{ env.LUA_VERSION }}

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install Luacheck
        run: luarocks install luacheck

      # ========================================================================
      # 4. Run Tests
      # ========================================================================
      - name: Run Luacheck
        run: |
          echo "üîç Running Luacheck..."
          luacheck src/ --exclude-files "*.backup" --ignore 212 || true

      - name: Validate manifest
        run: |
          echo "‚úÖ Validating manifest..."
          lua scripts/validate-manifest.lua ${{ env.ADDON_NAME }}.addon

      # ========================================================================
      # 5. Update Manifest Versions
      # ========================================================================
      - name: Update manifest version
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          DATE_VERSION=$(date +'%Y%m%d')
          
          echo "üìù Updating ${{ env.ADDON_NAME }}.addon"
          sed -i "s/^## Version: .*/## Version: $VERSION/g" ${{ env.ADDON_NAME }}.addon
          sed -i "s/^## AddOnVersion: .*/## AddOnVersion: $DATE_VERSION/g" ${{ env.ADDON_NAME }}.addon
          
          echo "‚úÖ Manifest updated:"
          echo "   Version: $VERSION"
          echo "   AddOnVersion: $DATE_VERSION"

      # ========================================================================
      # 6. Create Release ZIP
      # ========================================================================
      - name: Create release ZIP
        run: |
          echo "üì¶ Building release package..."
          
          # Create build directory
          BUILD_DIR="${{ env.BUILD_DIR }}"
          mkdir -p "$BUILD_DIR"
          
          # Read .build-ignore and create rsync exclude arguments
          EXCLUDE_ARGS=""
          while IFS= read -r pattern; do
            # Skip empty lines and comments
            [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue
            EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$pattern"
          done < .build-ignore
          
          # Copy files excluding patterns
          rsync -a --quiet \
            $EXCLUDE_ARGS \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='build' \
            --exclude='dist' \
            . "$BUILD_DIR/"
          
          # Create ZIP from temp directory
          cd /tmp
          zip -r -q "$GITHUB_WORKSPACE/${{ steps.addon_name.outputs.ZIP_NAME }}" "${{ env.ADDON_NAME }}"
          
          echo "‚úÖ Created: ${{ steps.addon_name.outputs.ZIP_NAME }}"
          
          # Verify ZIP structure
          echo "üìã ZIP contents:"
          unzip -l "$GITHUB_WORKSPACE/${{ steps.addon_name.outputs.ZIP_NAME }}" | head -20

      - name: Validate ZIP structure
        run: |
          bash scripts/validate-zip.sh "${{ steps.addon_name.outputs.ZIP_NAME }}"

      # ========================================================================
      # 7. Extract Changelog for Release Notes
      # ========================================================================
      - name: Extract changelog
        run: |
          echo "üìù Extracting changelog for v${{ steps.version.outputs.VERSION }}"
          
          # Extract the latest version section from CHANGELOG.md
          awk '
            /^## \['"${{ steps.version.outputs.VERSION }}"'\]/ { found=1; print; next }
            /^## \[/ { if (found) exit }
            found { print }
          ' CHANGELOG.md > release_notes.md
          
          # Fallback if extraction failed
          if [ ! -s release_notes.md ]; then
            echo "## ${{ steps.addon_name.outputs.ADDON_NAME }} v${{ steps.version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for full release notes." >> release_notes.md
          fi
          
          echo "üìã Release notes:"
          cat release_notes.md

      # ========================================================================
      # 8. Create GitHub Release
      # ========================================================================
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          name: "${{ steps.addon_name.outputs.ADDON_NAME }} v${{ steps.version.outputs.VERSION }}"
          tag: "v${{ steps.version.outputs.VERSION }}"
          artifacts: "${{ steps.addon_name.outputs.ZIP_NAME }}"
          artifactContentType: application/zip
          bodyFile: release_notes.md
          allowUpdates: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # ========================================================================
      # 9. Upload to ESOUI (PRODUCTION READY)
      # ========================================================================
      - name: Upload to ESOUI
        uses: m00nyONE/esoui-upload@v2
        with:
          # =================================================================
          # üîß CONFIGURATION REQUIRED:
          # 1. Add ESOUI_API_KEY to GitHub Secrets:
          #    Settings ‚Üí Secrets ‚Üí Actions ‚Üí New repository secret
          #    Name: ESOUI_API_KEY
          #    Value: [Your token from https://www.esoui.com/downloads/filecpl.php?action=apitokens]
          #
          # 2. Replace ADDON_ID after first manual upload:
          #    After uploading v2.1.0 manually to ESOUI, get the ID from:
          #    https://www.esoui.com/downloads/info####-CharacterMarkdown.html
          #                                        ^^^^
          #    Replace 'XXXX' below with your actual ID (numbers only)
          # =================================================================
          
          api_key: ${{ secrets.ESOUI_API_KEY }}
          addon_id: ${{ env.ESOUI_ADDON_ID }} # https://www.esoui.com/downloads/info4279-CharacterMarkdown.html#info
          
          # Version from Git tag
          version: ${{ steps.version.outputs.VERSION }}
          
          # Release artifacts
          zip_file: ${{ steps.addon_name.outputs.ZIP_NAME }}
          changelog_file: 'CHANGELOG.md'
          # description_file: Optional - omitted to use manifest description
          
          # ESO compatibility version (update as ESO patches release)
          # Format: MAJOR.MINOR.PATCH (e.g., 11.0.0 for Gold Road)
          # Get current from: /script d(GetAPIVersion()) in ESO
          compatibility: ${{ env.ESO_API_VERSION }}
          
          # Test mode: set to 'true' for dry-run, 'false' for production
          test: false

      # ========================================================================
      # 10. Success Notification
      # ========================================================================
      - name: Release summary
        if: success()
        run: |
          echo "üéâ Release v${{ steps.version.outputs.VERSION }} complete!"
          echo ""
          echo "üì¶ Addon: ${{ steps.addon_name.outputs.ADDON_NAME }}"
          echo "üì¶ Client Release: ${{ steps.addon_name.outputs.CLIENT_RELEASE }}"
          echo ""
          echo "‚úÖ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
          echo "‚úÖ ESOUI Upload: Submitted (check https://www.esoui.com/downloads/author.php)"
          echo ""
          echo "üì¶ Artifacts:"
          echo "   - ${{ steps.addon_name.outputs.ZIP_NAME }}"
          echo ""
          echo "üîó Next steps:"
          echo "   1. Verify GitHub release looks correct"
          echo "   2. Check ESOUI for successful upload"
          echo "   3. Test addon in-game after approval"
